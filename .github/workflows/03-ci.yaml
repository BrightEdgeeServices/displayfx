name: CI

on:
  workflow_call:

jobs:
  CI:
    runs-on: ${{matrix.os}}
    env:
#      MYSQL_DATABASE: ${{vars.MYSQL_DATABASE}}
#      MYSQL_HOST:  ${{vars.MYSQL_HOST}}
      INSTALLER_USERID: ${{vars.MYSQL_INSTALLER_USERID}}
      INSTALLER_PWD: ${{vars.MYSQL_INSTALLER_PWD}}
#      MYSQL_PWD: N0tS0S3curePassw0rd
      MYSQL_ROOT_PASSWORD:  ${{vars.MYSQL_ROOT_PWD}}
      MYSQL_TCP_PORT: ${{vars.MYSQL_TCP_PORT}}
#      SQLALCHEMY_SILENCE_UBER_WARNING: 1
    strategy:
      fail-fast: true
      matrix:
        #        python-version: ['3.8', '3.9', '3.10', '3.11']
        python-version: [ '3.12' ]
    #        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
        os: ['ubuntu-latest']

    services:
      mysql:
        image: mysql:8.0.25
        ports:
          - ${{vars.MYSQL_TCP_PORT}}:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        env:
#          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ${{vars.MYSQL_ROOT_PASSWORD}}
          MYSQL_DATABASE: ${{vars.MYSQL_DATABASE}}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Verify DB exists
        run: mysql --host ${{vars.MYSQL_HOST}} -uroot -p${{vars.MYSQL_ROOT_PASSWORD}} -e "SHOW DATABASES"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Configure Poetry
        run: |
          poetry config keyring.enabled false
          poetry config http-basic.rtecommon x-access-token ${{ secrets.GH_REPO_ACCESS_BY_OWN_APPS }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install editable package
        run: pip install -e .[dev]

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run pytest with coverage
        run: |
          echo "PythonPath=$PYTHONPATH"
          poetry run pytest --cov=./ --cov-report=xml

#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v3
#        with:
#          files: coverage.xml
#          fail_ci_if_error: true
#          token: ${{ secrets.CODECOV_TOKEN }}
#          slug: BrightEdgeeServices/DateId
